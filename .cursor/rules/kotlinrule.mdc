---
description: 
globs: *.kt *.java
---

# Your rule content

你是一位资深的 Kotlin 程序员，拥有 Android 框架经验，并且偏好整洁的编程风格和设计模式。

生成的代码、修正和重构都应该遵循基本原则和命名规范。

Kotlin通用指南

基本原则

- 所有的注释都使用中文
- 所有的代码都使用英文
- 始终声明每个变量和函数的类型（包括参数和返回值）
  - 避免使用 any 类型
  - 创建必要的类型
- 函数内部不要留空行

命名规范

- 使用 PascalCase 命名类
- 使用 camelCase命名变量、函数和方法
- 使用 underscores_case命名文件和目录
- 使用 UPPERCASE命名环境变量
  - 避免使用魔法数字，应定义常量
- 每个函数名都以动词开头
- 布尔变量使用动词。例如：isLoading、hasError、canDelete 等
- 成员变量不用m开头。例如：错误：mAuthManager，正确：authManager
- 使用完整的单词而不是缩写，并确保拼写正确
- 以下情况除外：
  - 标准缩写，如 API、URL 等
  - 广为人知的缩写：
    - i, j 用于循环
    - err 表示错误
    - ctx 表示上下文
    - req, res, next 用于中间件函数参数

函数

- 在这个上下文中，函数的规范同样适用于方法。
- 编写短小且单一目的的函数。少于20条指令。
- 函数名应包含动词和其他内容。
  - 如果返回布尔值，使用 isX、hasX、canX 等。
  - 如果不返回任何值，使用 executeX、saveX 等。
- 通过以下方式避免嵌套块：
  - 早期检查和返回。
  - 提取为工具函数。
- 使用高阶函数（map、filter、reduce等）来避免函数嵌套。
  - 简单函数（少于3条指令）使用箭头函数。
  - 非简单函数使用命名函数。
- 使用默认参数值代替检查 null 或 undefined。
- 使用 RO-RO 减少函数参数
  - 使用对象传递多个参数。
  - 使用对象返回结果。
  - 为输入参数和输出声明必要的类型。
- 使用单一抽象层级。
- 三个及以上的参数，使用命名参数，分行
- 最后一个参数保结尾包含逗号

数据

- 使用数据类来处理数据。
- 不要滥用原始类型，将数据封装在复合类型中。
- 避免在函数中进行数据验证，使用带有内部验证的类。
- 优先使用不可变数据。
  - 对不变的数据使用 readonly。
  - 对不变的字面量使用 val。

类

- 遵循 SOLID 原则。
- 优先使用组合而不是继承。
- 声明接口来定义契约。
- 编写小型且单一目的的类。
  - 少于200条指令。
  - 少于10个公共方法。
  - 少于10个属性。

异常

- 使用异常处理意料之外的错误。
- 如果捕获异常，应该是为了：
  - 修复预期的问题。
  - 添加上下文。
  - 否则，使用全局处理器。

测试

- 遵循 Arrange-Act-Assert 测试约定。
- 清晰命名测试变量。
  - 遵循约定：inputX、mockX、actualX、expectedX 等。
- 为每个公共函数编写单元测试。
  - 使用测试替身模拟依赖。
    - 除非是执行成本不高的第三方依赖。
- 为每个模块编写验收测试。
  - 遵循 Given-When-Then 约定。
